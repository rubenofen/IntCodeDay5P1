{"version":3,"sources":["input.js","components/Table/Table.js","components/Table/index.js","StatusMachine/IntCode.js","useInput.js","App.js","serviceWorker.js","index.js"],"names":["defInput","Cell","value","className","status","Row","input","index","map","key","ThThead","rowElements","ths","i","push","Table","console","log","current","slice","statuses","suma","a","b","array","position","multi","part1","table","concat","returnObject","op","output","current_pointer","length","substring","split","reverse","join","getOpCodeAndMode","toString","calculo","operand","parseInt","magicInput","singleMovement","useInput","initialState","useState","setInput","e","target","iniTable","data","resetTable","Array","fill","App","defaultInput","rawInput","setRawInput","setTable","currentPointer","setCurrentPointer","setOutput","setOp","auto","setAuto","speed","setSpeed","tiemoutId","setTiemoutId","executeStep","newStatus","newOputput","useEffect","setTimeout","onClick","disabled","type","onChange","checked","clearTimeout","rows","cols","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fd8943d3.chunk.js","sourcesContent":["const defInput = \"3,225,1,225,6,6,1100,1,238,225,104,0,1101,69,55,225,1001,144,76,224,101,-139,224,224,4,224,1002,223,8,223,1001,224,3,224,1,223,224,223,1102,60,49,225,1102,51,78,225,1101,82,33,224,1001,224,-115,224,4,224,1002,223,8,223,1001,224,3,224,1,224,223,223,1102,69,5,225,2,39,13,224,1001,224,-4140,224,4,224,102,8,223,223,101,2,224,224,1,224,223,223,101,42,44,224,101,-120,224,224,4,224,102,8,223,223,101,3,224,224,1,223,224,223,1102,68,49,224,101,-3332,224,224,4,224,1002,223,8,223,1001,224,4,224,1,224,223,223,1101,50,27,225,1102,5,63,225,1002,139,75,224,1001,224,-3750,224,4,224,1002,223,8,223,1001,224,3,224,1,223,224,223,102,79,213,224,1001,224,-2844,224,4,224,102,8,223,223,1001,224,4,224,1,223,224,223,1,217,69,224,1001,224,-95,224,4,224,102,8,223,223,1001,224,5,224,1,223,224,223,1102,36,37,225,1101,26,16,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1107,677,677,224,102,2,223,223,1006,224,329,1001,223,1,223,1108,677,677,224,1002,223,2,223,1006,224,344,1001,223,1,223,107,226,226,224,1002,223,2,223,1006,224,359,101,1,223,223,1008,226,226,224,102,2,223,223,1005,224,374,1001,223,1,223,1107,226,677,224,1002,223,2,223,1006,224,389,1001,223,1,223,1008,677,226,224,1002,223,2,223,1005,224,404,1001,223,1,223,7,677,226,224,102,2,223,223,1005,224,419,1001,223,1,223,1008,677,677,224,1002,223,2,223,1006,224,434,1001,223,1,223,108,226,226,224,102,2,223,223,1006,224,449,1001,223,1,223,108,677,677,224,102,2,223,223,1006,224,464,1001,223,1,223,107,226,677,224,1002,223,2,223,1005,224,479,101,1,223,223,1108,226,677,224,1002,223,2,223,1006,224,494,1001,223,1,223,107,677,677,224,1002,223,2,223,1006,224,509,101,1,223,223,7,677,677,224,102,2,223,223,1006,224,524,1001,223,1,223,1007,226,677,224,1002,223,2,223,1005,224,539,1001,223,1,223,8,226,677,224,1002,223,2,223,1005,224,554,101,1,223,223,8,677,677,224,102,2,223,223,1005,224,569,101,1,223,223,7,226,677,224,102,2,223,223,1006,224,584,1001,223,1,223,1007,226,226,224,102,2,223,223,1006,224,599,1001,223,1,223,1107,677,226,224,1002,223,2,223,1006,224,614,1001,223,1,223,1108,677,226,224,1002,223,2,223,1005,224,629,1001,223,1,223,1007,677,677,224,102,2,223,223,1006,224,644,1001,223,1,223,108,226,677,224,102,2,223,223,1005,224,659,101,1,223,223,8,677,226,224,1002,223,2,223,1006,224,674,1001,223,1,223,4,223,99,226\";\r\n\r\nexport default defInput;","import React from \"react\";\r\nimport \"./Table.scss\";\r\n\r\nconst Cell = ({ value, className }) => (\r\n  <td className={`${className} ${value.status}`}>{value.value}</td>\r\n);\r\n\r\nconst Row = ({ input, index }) => {\r\n  return (\r\n    <tr>\r\n      <th>{index}</th>\r\n      {input.map((value, index) => (\r\n        <Cell\r\n          className={index % 10 === 9 ? \"bordered\" : \"\"}\r\n          key={index}\r\n          value={value}\r\n        />\r\n      ))}\r\n    </tr>\r\n  );\r\n};\r\n\r\nconst ThThead = ({rowElements}) => {\r\n    const ths = [];\r\n    for (let i = 0; i <= rowElements; i++) {\r\n        i?ths.push(<th>{i-1}</th>):ths.push(<th></th>)\r\n    }\r\n    return ths;\r\n}\r\n\r\nconst Table = ({ input, rowElements }) => {\r\n    console.log(input);\r\n  return (\r\n    <table>\r\n        <thead>\r\n            <ThThead rowElements={rowElements}/>\r\n        </thead>\r\n      <tbody>\r\n        {input.map((current, index) => {\r\n            console.log(`current ${current}, index ${index}`)\r\n          if (index % rowElements === 0) {\r\n            return (\r\n              <Row\r\n                key={index}\r\n                input={input.slice(index, index + rowElements)}\r\n                index={index}\r\n              />\r\n            );\r\n          }\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import Table from './Table';\r\n\r\nexport default Table;","const statuses = {\r\n  current_pointer: \"current_pointer\",\r\n  read: \"read\",\r\n  read_pointer: \"read_pointer\",\r\n  write_pointer: \"write_pointer\",\r\n  write: \"write\"\r\n};\r\n\r\nconst getOpCodeAndMode = op => {\r\n  const opCode =\r\n    op.length === 1 ? 0 + op : op[op.length - 2] + op[op.length - 1];\r\n  const mode = op.substring(0, op.length - 2);\r\n  const result = [\r\n    opCode,\r\n    mode\r\n      .split(\"\")\r\n      .reverse()\r\n      .join(\"\")\r\n  ];\r\n  //console.log(`Op ${result} from ${op}`);\r\n  return result;\r\n};\r\n\r\nconst singleMovement = (magicInput, array, position) => {\r\n    if(!array[position]) array[position] = {};\r\n  array[position].value = magicInput;\r\n  array[position].status = statuses.write;\r\n};\r\n\r\nconst suma = a => b => (array, position) => {\r\n  //console.log(`suma: a ${a}, b ${b}, position ${position}`);\r\n  array[position].value = a + b;\r\n  array[position].status = statuses.write;\r\n  //console.log(array[position]);\r\n};\r\n\r\nconst multi = a => b => (array, position) => {\r\n  //console.log(`multi: a ${a}, b ${b}, position ${position}`);\r\n  array[position].value = a * b;\r\n  array[position].status = statuses.write;\r\n  //console.log(array[position]);\r\n};\r\n\r\nexport const part1 = (table, i) => {\r\n  const input = table.concat();\r\n  const returnObject = {\r\n    op: \"\",\r\n    output: \"\",\r\n    current_pointer: \"\",\r\n    table: []\r\n  };\r\n\r\n  const magicInput = 1;\r\n  const op = getOpCodeAndMode(input[i].value.toString());\r\n  input[i].status = statuses.current_pointer;\r\n  returnObject.op = input[i].value.toString();\r\n\r\n  if (op[0] === \"01\" || op[0] === \"02\") {\r\n    let calculo = op[0] === \"01\" ? suma : multi;\r\n    for (let index = 0; index < 2; index++) {\r\n      const mode = parseInt(op[1][index]);\r\n      let operand;\r\n      if (mode) {\r\n        operand = input[(i += 1)].value;\r\n        input[i].status = statuses.read;\r\n      } else {\r\n        operand = input[input[(i += 1)].value].value;\r\n        input[i].status = statuses.read_pointer;\r\n        input[input[i].value].status = statuses.read;\r\n      }\r\n      calculo = calculo(operand);\r\n    }\r\n    calculo(input, input[(i += 1)].value);\r\n    input[i].status = statuses.write_pointer;\r\n  }\r\n\r\n  if (op[0] === \"03\") {\r\n      singleMovement(magicInput, input, input[(i += 1)].value);\r\n      input[i].status = statuses.write_pointer;\r\n  }\r\n  if (op[0] === \"04\")\r\n    if (op[1][0]) {\r\n      returnObject.output = input[(i += 1)].value;\r\n      input[i].status = statuses.read;\r\n    } else {\r\n      returnObject.output = input[input[(i += 1)].value].value;\r\n      input[i].status = statuses.read_pointer;\r\n      input[input[i].value].status = statuses.read;\r\n    }\r\n  returnObject.current_pointer = i + 1;\r\n  returnObject.table = input;\r\n  return returnObject;\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nconst useInput = initialState => {\r\n  const [input, setInput] = useState(initialState);\r\n  const setState = e => {\r\n    setInput(e.target.value);\r\n  };\r\n  return [input, setState];\r\n};\r\n\r\nexport default useInput;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport defaultInput from \"./input\";\r\nimport Table from \"./components/Table\";\r\nimport { part1 } from \"./StatusMachine/IntCode\";\r\nimport useInput from \"./useInput\";\r\n\r\nconst iniTable = data =>\r\n  data.map(value => {\r\n    return { value: parseInt(value), status: \"\" };\r\n  });\r\n\r\nconst resetTable = data => {\r\n  const newArray = new Array(data.length).fill({ value: \"\", status: \"\" });\r\n  return newArray.map((value, index) =>\r\n    data[index] ? { value: data[index].value, status: \"\" } : value\r\n  );\r\n};\r\n\r\nfunction App() {\r\n  const [rawInput, setRawInput] = useState(defaultInput);\r\n  const [table, setTable] = useState(iniTable(rawInput.split(\",\")));\r\n  const [currentPointer, setCurrentPointer] = useState(0);\r\n  const [output, setOutput] = useState([]);\r\n  const [op, setOp] = useState(\"\");\r\n  const [auto, setAuto] = useState(false);\r\n  const [speed, setSpeed] = useInput(1000);\r\n  const [tiemoutId, setTiemoutId] = useState(\"\");\r\n\r\n  const executeStep = () => {\r\n    const newStatus = part1(resetTable(table), currentPointer);\r\n    const newOputput = output.concat([newStatus.output]);\r\n    setTable(newStatus.table);\r\n    setCurrentPointer(newStatus.current_pointer);\r\n    setOutput(newOputput);\r\n    setOp(newStatus.op);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (auto && op !== \"99\") {\r\n      setTiemoutId(setTimeout(executeStep, speed));\r\n    }\r\n  }, [currentPointer, auto]);\r\n\r\n  const load = input => {\r\n    setTable(iniTable(input.target.value.split(\",\")));\r\n    setRawInput(input.target.value);\r\n  };\r\n\r\n  const checkAuto = input => {\r\n    setAuto(input.target.checked);\r\n    if (!input.target.checked) {\r\n      clearTimeout(tiemoutId);\r\n      setTiemoutId(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Table input={table} rowElements={30} />\r\n      <button onClick={executeStep} disabled={op === \"99\"}>\r\n        Next step\r\n      </button>\r\n      OP: <span>{op}</span>\r\n      <br />\r\n      Auto: <input type=\"checkbox\" onChange={checkAuto} checked={auto} />\r\n      Speed: <input type=\"number\" value={speed} onChange={setSpeed} />\r\n      <br />\r\n      {output && output.map(value => <div>{value}</div>)}\r\n      INPUT:\r\n      <div>\r\n        <textarea rows=\"10\" cols=\"50\" onChange={load} value={rawInput} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}